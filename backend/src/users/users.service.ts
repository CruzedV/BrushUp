import {
  BadRequestException,
  Injectable,
  NotFoundException,
} from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { User } from "src/entities/user.entity";
import { Followers } from "src/entities/followers.entity";
import { CreateUserDto } from "src/dto/create-user.dto";
import { TExtendedUser } from "src/types/user";

@Injectable()
export class UserService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,

    @InjectRepository(Followers)
    private readonly followersRepository: Repository<Followers>, // üí° –î–û–ë–ê–í–ò–õ–ò!
  ) {}

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createUser(createUserDto: CreateUserDto): Promise<User> {
    const user = this.userRepository.create(createUserDto);
    return this.userRepository.save(user);
  }

  async followUser(followerId: number, followedId: number): Promise<void> {
    if (followerId === followedId) {
      throw new BadRequestException("–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è");
    }

    const follower = await this.userRepository.findOne({
      where: { userId: followerId },
    });
    const followed = await this.userRepository.findOne({
      where: { userId: followedId },
    });

    if (!follower || !followed) {
      throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const follow = this.followersRepository.create({ follower, followed });
    await this.followersRepository.save(follow);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∏ –ø–æ—Å—Ç–∞–º–∏
  async getUserById(userId: number): Promise<TExtendedUser> {
    const user = await this.userRepository.findOne({
      where: { userId },
      relations: ["posts", "followers"],
    });

    if (!user) {
      throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const followersCount = await this.followersRepository.count({
      where: { followed: { userId } },
    });

    return { ...user, followersCount };
  }
}
